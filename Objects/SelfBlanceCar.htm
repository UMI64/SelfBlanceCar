<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SelfBlanceCar.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SelfBlanceCar.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Mon Dec 24 10:01:41 2018
<BR><P>
<H3>Maximum Stack Usage =       2004 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TASK_UI_Draw &rArr; UICORE::Task_Draw() &rArr; View::GetDREC(List&lang;DREC&rang;&) &rArr;  View::GetDREC(List&lang;DREC&rang;&) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e0]">__user_initial_stackheap</a>
 <LI><a href="#[fb]">unw_getcontext</a>
 <LI><a href="#[1d1]">libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)</a>
 <LI><a href="#[1cf]">libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)</a>
 <LI><a href="#[1d0]">libunwind::Registers_arm::saveVFPv3(unsigned long long*)</a>
 <LI><a href="#[1d8]">libunwind::Registers_arm::restoreCoreAndJumpTo()</a>
 <LI><a href="#[1da]">libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)</a>
 <LI><a href="#[1d9]">libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)</a>
 <LI><a href="#[1db]">libunwind::Registers_arm::restoreVFPv3(unsigned long long*)</a>
 <LI><a href="#[311]">_Unwind_Complete</a>
 <LI><a href="#[1f8]">_Unwind_DeleteException</a>
 <LI><a href="#[f7]">_Unwind_GetLanguageSpecificData</a>
 <LI><a href="#[f9]">_Unwind_GetRegionStart</a>
 <LI><a href="#[fa]">_Unwind_RaiseException</a>
 <LI><a href="#[fe]">_Unwind_Resume</a>
 <LI><a href="#[ff]">_Unwind_VRS_Get</a>
 <LI><a href="#[103]">_Unwind_VRS_Interpret</a>
 <LI><a href="#[104]">_Unwind_VRS_Pop</a>
 <LI><a href="#[106]">_Unwind_VRS_Set</a>
 <LI><a href="#[112]">__cxxabiv1::__enum_type_info::~__enum_type_info()</a>
 <LI><a href="#[312]">__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</a>
 <LI><a href="#[313]">__cxxabiv1::__shim_type_info::~__shim_type_info()</a>
 <LI><a href="#[7f]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a>
 <LI><a href="#[314]">__cxxabiv1::__array_type_info::~__array_type_info()</a>
 <LI><a href="#[315]">__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</a>
 <LI><a href="#[316]">__cxxabiv1::__class_type_info::~__class_type_info()</a>
 <LI><a href="#[317]">__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</a>
 <LI><a href="#[318]">__cxxabiv1::__pbase_type_info::~__pbase_type_info()</a>
 <LI><a href="#[319]">__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</a>
 <LI><a href="#[31a]">__cxxabiv1::__pointer_type_info::~__pointer_type_info()</a>
 <LI><a href="#[31b]">__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</a>
 <LI><a href="#[31c]">__cxxabiv1::__function_type_info::~__function_type_info()</a>
 <LI><a href="#[31d]">__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</a>
 <LI><a href="#[31e]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a>
 <LI><a href="#[31f]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</a>
 <LI><a href="#[320]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</a>
 <LI><a href="#[321]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</a>
 <LI><a href="#[322]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</a>
 <LI><a href="#[323]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</a>
 <LI><a href="#[324]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</a>
 <LI><a href="#[325]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</a>
 <LI><a href="#[80]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a>
 <LI><a href="#[113]">__cxxabiv1::__free_with_fallback(void*)</a>
 <LI><a href="#[87]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a>
 <LI><a href="#[115]">__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</a>
 <LI><a href="#[8b]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a>
 <LI><a href="#[117]">__cxxabiv1::__aligned_free_with_fallback(void*)</a>
 <LI><a href="#[118]">__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</a>
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a>
 <LI><a href="#[93]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a>
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a>
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a>
 <LI><a href="#[1d2]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</a>
 <LI><a href="#[92]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a>
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a>
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a>
 <LI><a href="#[1d5]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</a>
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a>
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a>
 <LI><a href="#[90]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a>
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a>
 <LI><a href="#[91]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a>
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a>
 <LI><a href="#[8f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a>
 <LI><a href="#[8e]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a>
 <LI><a href="#[1d4]">libunwind::Registers_arm::getRegisterName(int)</a>
 <LI><a href="#[1d7]">libunwind::Registers_arm::restoreSavedFloatRegisters()</a>
 <LI><a href="#[8d]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a>
 <LI><a href="#[81]">__cxxabiv1::__shim_type_info::noop1() const</a>
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop2() const</a>
 <LI><a href="#[84]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[85]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[1dd]">__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</a>
 <LI><a href="#[83]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[1df]">__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[1e0]">__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[1e2]">__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[88]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[89]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[8a]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[1e3]">__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[8c]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[1e1]">__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[1e4]">__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[9e]">std::bad_exception::what() const</a>
 <LI><a href="#[a0]">std::bad_array_length::what() const</a>
 <LI><a href="#[a2]">std::bad_array_new_length::what() const</a>
 <LI><a href="#[a4]">std::bad_alloc::what() const</a>
 <LI><a href="#[9d]">std::bad_exception::~bad_exception__deallocating()</a>
 <LI><a href="#[32c]">std::bad_array_length::bad_array_length()</a>
 <LI><a href="#[32d]">std::bad_array_length::bad_array_length__sub_object()</a>
 <LI><a href="#[9f]">std::bad_array_length::~bad_array_length__deallocating()</a>
 <LI><a href="#[32e]">std::bad_array_new_length::bad_array_new_length()</a>
 <LI><a href="#[32f]">std::bad_array_new_length::bad_array_new_length__sub_object()</a>
 <LI><a href="#[a1]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a>
 <LI><a href="#[1d6]">T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)</a>
 <LI><a href="#[330]">std::bad_alloc::bad_alloc()</a>
 <LI><a href="#[331]">std::bad_alloc::bad_alloc__sub_object()</a>
 <LI><a href="#[a3]">std::bad_alloc::~bad_alloc__deallocating()</a>
 <LI><a href="#[2]">std::bad_exception::~bad_exception()</a>
 <LI><a href="#[332]">std::bad_exception::~bad_exception__sub_object()</a>
 <LI><a href="#[333]">std::bad_array_length::~bad_array_length()</a>
 <LI><a href="#[334]">std::bad_array_length::~bad_array_length__sub_object()</a>
 <LI><a href="#[335]">std::bad_array_new_length::~bad_array_new_length()</a>
 <LI><a href="#[336]">std::bad_array_new_length::~bad_array_new_length__sub_object()</a>
 <LI><a href="#[337]">std::bad_alloc::~bad_alloc()</a>
 <LI><a href="#[338]">std::bad_alloc::~bad_alloc__sub_object()</a>
 <LI><a href="#[339]">std::exception::~exception()</a>
 <LI><a href="#[b]">std::exception::~exception__sub_object()</a>
 <LI><a href="#[33a]">std::type_info::~type_info()</a>
 <LI><a href="#[a]">std::type_info::~type_info__sub_object()</a>
 <LI><a href="#[1e5]">std::unexpected()</a>
 <LI><a href="#[120]">std::__terminate(void(*)())</a>
 <LI><a href="#[1e6]">std::__unexpected(void(*)())</a>
 <LI><a href="#[1f4]">std::get_terminate()</a>
 <LI><a href="#[33b]">std::set_terminate(void(*)())</a>
 <LI><a href="#[1f5]">std::get_unexpected()</a>
 <LI><a href="#[33c]">std::set_unexpected(void(*)())</a>
 <LI><a href="#[5f]">std::terminate()</a>
 <LI><a href="#[16f]">operator delete[] (void*)</a>
 <LI><a href="#[1ea]">operator delete[] (void*, const std::nothrow_t&)</a>
 <LI><a href="#[1eb]">operator delete[] (void*, unsigned)</a>
 <LI><a href="#[16c]">operator new[] (unsigned)</a>
 <LI><a href="#[1ed]">operator new[] (unsigned, const std::nothrow_t&)</a>
 <LI><a href="#[5b]">__aeabi_unwind_cpp_pr0</a>
 <LI><a href="#[5c]">__aeabi_unwind_cpp_pr1</a>
 <LI><a href="#[5d]">__aeabi_unwind_cpp_pr2</a>
 <LI><a href="#[1ef]">__cxa_allocate_dependent_exception</a>
 <LI><a href="#[1f0]">__cxa_allocate_exception</a>
 <LI><a href="#[11f]">__cxa_begin_catch</a>
 <LI><a href="#[1f3]">__cxa_begin_cleanup</a>
 <LI><a href="#[1f1]">__cxa_call_unexpected</a>
 <LI><a href="#[122]">__cxa_decrement_exception_refcount</a>
 <LI><a href="#[1e8]">__cxa_end_catch</a>
 <LI><a href="#[1f2]">__cxa_get_globals</a>
 <LI><a href="#[1e9]">__cxa_get_globals_fast</a>
 <LI><a href="#[205]">__cxa_guard_acquire</a>
 <LI><a href="#[79]">__cxa_pure_virtual</a>
 <LI><a href="#[1f7]">__cxa_rethrow</a>
 <LI><a href="#[1f9]">__cxa_rethrow_primary_exception</a>
 <LI><a href="#[1f6]">__cxa_throw</a>
 <LI><a href="#[1de]">__dynamic_cast</a>
 <LI><a href="#[1fa]">__gnu_unwind_frame</a>
 <LI><a href="#[68]">__gxx_personality_v0</a>
 <LI><a href="#[1e7]">abort_message</a>
 <LI><a href="#[1d3]">decode_eht_entry</a>
 <LI><a href="#[102]">unw_get_fpreg</a>
 <LI><a href="#[f8]">unw_get_proc_info</a>
 <LI><a href="#[100]">unw_get_reg</a>
 <LI><a href="#[fc]">unw_init_local</a>
 <LI><a href="#[110]">unw_resume</a>
 <LI><a href="#[101]">unw_save_vfp_as_X</a>
 <LI><a href="#[107]">unw_set_fpreg</a>
 <LI><a href="#[105]">unw_set_reg</a>
 <LI><a href="#[124]">unw_step</a>
 <LI><a href="#[11e]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>
 <LI><a href="#[61]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[60]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[aa]">__cxa_end_cleanup_impl</a>
 <LI><a href="#[119]">_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</a>
 <LI><a href="#[121]">_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</a>
 <LI><a href="#[11c]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>
 <LI><a href="#[11b]">_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</a>
 <LI><a href="#[11d]">_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</a>
 <LI><a href="#[fd]">_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</a>
 <LI><a href="#[123]">&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</a>
 <LI><a href="#[114]">&lang;unnamed namespace 1&rang;::fallback_free(void*)</a>
 <LI><a href="#[116]">&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[15]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DebugMon_Handler</a><BR>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[5f]">std::terminate()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[145]">__clang_call_terminate</a><BR>
 <LI><a href="#[120]">std::__terminate(void(*)())</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__cxa_begin_catch</a><BR>
 <LI><a href="#[1f1]">__cxa_call_unexpected</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__cxa_begin_catch</a><BR>
 <LI><a href="#[11c]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__cxa_begin_catch</a><BR>
 <LI><a href="#[1f7]">__cxa_rethrow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__cxa_begin_catch</a><BR>
 <LI><a href="#[11e]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__cxa_begin_catch</a><BR>
 <LI><a href="#[1f0]">__cxa_allocate_exception</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">std::terminate()</a><BR>
 <LI><a href="#[176]">View::GetDREC(List&lang;DREC&rang;&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[176]">View::GetDREC(List&lang;DREC&rang;&)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from pcm5102.o(.text.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from cmsis_os2.o(.text.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">TASK_BB</a> from conrtol.o(.text.TASK_BB) referenced 2 times from conrtol.o(.text._ZN7ConrtolC2Ev)
 <LI><a href="#[59]">TASK_Count</a> from conrtol.o(.text.TASK_Count) referenced 2 times from conrtol.o(.text._ZN7ConrtolC2Ev)
 <LI><a href="#[58]">TASK_GetAttitude</a> from conrtol.o(.text.TASK_GetAttitude) referenced 2 times from conrtol.o(.text._ZN7ConrtolC2Ev)
 <LI><a href="#[56]">TASK_Moto</a> from conrtol.o(.text.TASK_Moto) referenced 2 times from conrtol.o(.text._ZN7ConrtolC2Ev)
 <LI><a href="#[5a]">TASK_UI_Draw</a> from display.o(.text.TASK_UI_Draw) referenced 2 times from display.o(.text._ZN7DisplayC2Ev)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">TimerCallback</a> from cmsis_os2.o(.text.TimerCallback) referenced 4 times from cmsis_os2.o(.text.osTimerNew)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">DisplayDEV::Open()</a> from display.o(.text._ZN10DisplayDEV4OpenEv) referenced from display.o(.rodata._ZTV10DisplayDEV)
 <LI><a href="#[6b]">DisplayDEV::Close()</a> from display.o(.text._ZN10DisplayDEV5CloseEv) referenced from display.o(.rodata._ZTV10DisplayDEV)
 <LI><a href="#[69]">DisplayDEV::Point(int, int, unsigned)</a> from display.o(.text._ZN10DisplayDEV5PointEiij) referenced from display.o(.rodata._ZTV10DisplayDEV)
 <LI><a href="#[6d]">DisplayDEV::~DisplayDEV__deallocating()</a> from display.o(.text._ZN10DisplayDEVD0Ev) referenced from display.o(.rodata._ZTV10DisplayDEV)
 <LI><a href="#[6c]">DisplayDEV::~DisplayDEV__sub_object()</a> from display.o(.text._ZN10DisplayDEVD2Ev) referenced from display.o(.rodata._ZTV10DisplayDEV)
 <LI><a href="#[7f]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7f]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[7f]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[80]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[87]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8b]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[61]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_throw)
 <LI><a href="#[60]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
 <LI><a href="#[6f]">REC::~REC__deallocating()</a> from display.o(.text._ZN3RECD0Ev) referenced from display.o(.rodata._ZTV3REC)
 <LI><a href="#[6e]">REC::~REC__sub_object()</a> from display.o(.text._ZN3RECD2Ev) referenced from display.o(.rodata._ZTV3REC)
 <LI><a href="#[71]">DREC::~DREC__deallocating()</a> from display.o(.text._ZN4DRECD0Ev) referenced from display.o(.rodata._ZTV4DREC)
 <LI><a href="#[70]">DREC::~DREC__sub_object()</a> from display.o(.text._ZN4DRECD2Ev) referenced from display.o(.rodata._ZTV4DREC)
 <LI><a href="#[73]">OLED::Open()</a> from display.o(.text._ZN4OLED4OpenEv) referenced from display.o(.rodata._ZTV4OLED)
 <LI><a href="#[74]">OLED::Close()</a> from display.o(.text._ZN4OLED5CloseEv) referenced from display.o(.rodata._ZTV4OLED)
 <LI><a href="#[72]">OLED::Point(int, int, unsigned)</a> from display.o(.text._ZN4OLED5PointEiij) referenced from display.o(.rodata._ZTV4OLED)
 <LI><a href="#[76]">OLED::~OLED__deallocating()</a> from display.o(.text._ZN4OLEDD0Ev) referenced from display.o(.rodata._ZTV4OLED)
 <LI><a href="#[75]">OLED::~OLED__sub_object()</a> from display.o(.text._ZN4OLEDD2Ev) referenced from display.o(.rodata._ZTV4OLED)
 <LI><a href="#[78]">View::~View__deallocating()</a> from display.o(.text._ZN4ViewD0Ev) referenced from display.o(.rodata._ZTV4View)
 <LI><a href="#[77]">View::~View__sub_object()</a> from display.o(.text._ZN4ViewD2Ev) referenced from display.o(.rodata._ZTV4View)
 <LI><a href="#[7e]">RecView::Draw(REC&)</a> from display.o(.text._ZN7RecView4DrawER3REC) referenced from display.o(.rodata._ZTV7RecView)
 <LI><a href="#[7d]">RecView::OnDraw()</a> from display.o(.text._ZN7RecView6OnDrawEv) referenced from display.o(.rodata._ZTV7RecView)
 <LI><a href="#[7c]">RecView::OnToch(float, float)</a> from display.o(.text._ZN7RecView6OnTochEff) referenced from display.o(.rodata._ZTV7RecView)
 <LI><a href="#[7b]">RecView::~RecView__deallocating()</a> from display.o(.text._ZN7RecViewD0Ev) referenced from display.o(.rodata._ZTV7RecView)
 <LI><a href="#[7a]">RecView::~RecView__sub_object()</a> from display.o(.text._ZN7RecViewD2Ev) referenced from display.o(.rodata._ZTV7RecView)
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[93]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[92]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[90]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[91]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[8f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[8e]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[8d]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a> from libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[81]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[81]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[81]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[84]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[85]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[89]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8a]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8c]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[9e]">std::bad_exception::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[a0]">std::bad_array_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt16bad_array_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[a2]">std::bad_array_new_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[a4]">std::bad_alloc::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[9d]">std::bad_exception::~bad_exception__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[2]">std::bad_exception::~bad_exception()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from cxa_personality.cpp.o(.text.__cxa_call_unexpected)
 <LI><a href="#[9f]">std::bad_array_length::~bad_array_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[a1]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[a3]">std::bad_alloc::~bad_alloc__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[b]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[b]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
 <LI><a href="#[b]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[b]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[5f]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[5f]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
 <LI><a href="#[5b]">__aeabi_unwind_cpp_pr0</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[5c]">__aeabi_unwind_cpp_pr1</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[5d]">__aeabi_unwind_cpp_pr2</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from display.o(.rodata._ZTV4View)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN3REC8SubtractES_RS_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4ListI3RECE3AddERKS0_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4ListI3RECE3AddERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4ListI3RECED2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4ListI4DRECE3AddERKS0_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListI4DRECE3AddERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListI4DRECED2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_core_dev.o(.ARM.extab.text._ZN4ListIP10DisplayDEVE3AddERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListIP10DisplayDEVE3AddERKS2_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListIP10DisplayDEVED2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4ListIP4ViewE3AddERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListIP4ViewE3AddERKS2_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ListIP4ViewED2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4OLEDC2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4OLEDD2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4View18EliminationOverlapER4ListI4DRECE)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN4View7GetDRECER4ListI4DRECE)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN4ViewC2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_core_task_eraw.o(.ARM.extab.text._ZN6UICORE9Task_DrawEv)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN6UICOREC2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from conrtol.o(.ARM.extab.text._ZN7Conrtol9Task_MotoEv)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN7DisplayC2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from mpu6050.o(.ARM.extab.text._ZN7mpu6050C2Ev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from ui_view.o(.ARM.extab.text._ZN8ItemNodeI3RECE18CreateNextItemNodeERKS0_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN8ItemNodeI4DRECE18CreateNextItemNodeERKS0_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN8ItemNodeIP10DisplayDEVE18CreateNextItemNodeERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from display.o(.ARM.extab.text._ZN8ItemNodeIP4ViewE18CreateNextItemNodeERKS1_)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from main.o(.ARM.extab.text._ZdlPv)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
 <LI><a href="#[68]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from main.o(.ARM.extab.text.main)
 <LI><a href="#[a5]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5e]">abort</a> from abort.o(.text) referenced from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[5e]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
 <LI><a href="#[64]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[63]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[67]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[65]">vEventGroupClearBitsCallback</a> from event_groups.o(.text.vEventGroupClearBitsCallback) referenced 2 times from event_groups.o(.text.xEventGroupClearBitsFromISR)
 <LI><a href="#[66]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2dc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2dd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ae]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2df]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2e0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[2e1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2e2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2e3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2e4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2e5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2e6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2e7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2e8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2e9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ea]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2eb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2ec]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2ed]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ee]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2ef]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2f0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2f1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2f2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2f3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2f4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[2f5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2f6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2f7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2f9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ac]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2fa]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Display::Display() &rArr; UICORE::operator =(const UICORE&) &rArr; List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2fb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[be]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2fc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b2]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>

<P><STRONG><a name="[c3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2fd]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2fe]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[2ff]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[300]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ca]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[cc]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[cd]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>

<P><STRONG><a name="[ce]"></a>posix_memalign</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, h1_memalign_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>

<P><STRONG><a name="[d0]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[d2]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[5e]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[d4]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[304]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>unw_getcontext</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[1d1]"></a>libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[1cf]"></a>libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[1d0]"></a>libunwind::Registers_arm::saveVFPv3(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[c1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[cb]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[305]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[d8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[db]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[da]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[c2]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[1d8]"></a>libunwind::Registers_arm::restoreCoreAndJumpTo()</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[1da]"></a>libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[1d9]"></a>libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[1db]"></a>libunwind::Registers_arm::restoreVFPv3(unsigned long long*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[df]"></a>_sys_command_string</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_command_string
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[309]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[30a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30d]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[30f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, maybetermalloc2.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[de]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[dd]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1dc]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[b4]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[e2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[e3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e5]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[e4]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[189]"></a>GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Init()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToOutput()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToInput()
</UL>

<P><STRONG><a name="[1b6]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, stm32f10x_gpio.o(.text.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[188]"></a>GPIO_ResetBits</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Nack()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Ack()
</UL>

<P><STRONG><a name="[18b]"></a>GPIO_SetBits</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Init()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Play()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Nack()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Ack()
</UL>

<P><STRONG><a name="[1ad]"></a>I2S_Cmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text.I2S_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Play()
</UL>

<P><STRONG><a name="[e6]"></a>I2S_Init</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, stm32f10x_spi.o(.text.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2S_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[1b1]"></a>NVIC_Init</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[ec]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[187]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Init()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[eb]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[e7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 378 bytes, Stack size 28 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, pcm5102.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_I2S_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f10x_spi.o(.text.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[1b0]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f10x_spi.o(.text.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
</UL>

<P><STRONG><a name="[e9]"></a>SPI_I2S_SendData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text.SPI_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Play()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os2.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[310]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>TASK_BB</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, conrtol.o(.text.TASK_BB))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TASK_BB &rArr; Conrtol::Task_BB() &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conrtol.o(.text._ZN7ConrtolC2Ev)
</UL>
<P><STRONG><a name="[59]"></a>TASK_Count</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, conrtol.o(.text.TASK_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TASK_Count &rArr; Conrtol::Task_Count() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conrtol.o(.text._ZN7ConrtolC2Ev)
</UL>
<P><STRONG><a name="[58]"></a>TASK_GetAttitude</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, conrtol.o(.text.TASK_GetAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = TASK_GetAttitude &rArr; Conrtol::Task_GetAttitude() &rArr; AHRS::IMUupdateAG(ACCEL, GYRO) &rArr; InvSqrt(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conrtol.o(.text._ZN7ConrtolC2Ev)
</UL>
<P><STRONG><a name="[56]"></a>TASK_Moto</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, conrtol.o(.text.TASK_Moto))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = TASK_Moto &rArr; Conrtol::Task_Moto() &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conrtol.o(.text._ZN7ConrtolC2Ev)
</UL>
<P><STRONG><a name="[5a]"></a>TASK_UI_Draw</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, display.o(.text.TASK_UI_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2004 + Unknown Stack Size
<LI>Call Chain = TASK_UI_Draw &rArr; UICORE::Task_Draw() &rArr; View::GetDREC(List&lang;DREC&rang;&) &rArr;  View::GetDREC(List&lang;DREC&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text._ZN7DisplayC2Ev)
</UL>
<P><STRONG><a name="[1c4]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1b3]"></a>TIM_Cmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::ON()
</UL>

<P><STRONG><a name="[1b4]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CtrlPWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::ON()
</UL>

<P><STRONG><a name="[1b8]"></a>TIM_OC1Init</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1c0]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1ba]"></a>TIM_OC2Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1c1]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1bc]"></a>TIM_OC3Init</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1c2]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1be]"></a>TIM_OC4Init</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC4PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1b9]"></a>TIM_SetCompare1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_SetCompare1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1bb]"></a>TIM_SetCompare2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_SetCompare2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SetCompare2
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1bd]"></a>TIM_SetCompare3</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_SetCompare3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SetCompare3
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1bf]"></a>TIM_SetCompare4</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_SetCompare4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[1b7]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 330 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[311]"></a>_Unwind_Complete</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Complete), UNUSED)

<P><STRONG><a name="[1f8]"></a>_Unwind_DeleteException</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_DeleteException))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[f7]"></a>_Unwind_GetLanguageSpecificData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetLanguageSpecificData))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[f9]"></a>_Unwind_GetRegionStart</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetRegionStart))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[fa]"></a>_Unwind_RaiseException</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_RaiseException))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[fe]"></a>_Unwind_Resume</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_Resume &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View__sub_object()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[ff]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_fpreg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[103]"></a>_Unwind_VRS_Interpret</STRONG> (Thumb, 556 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[104]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>

<P><STRONG><a name="[106]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_fpreg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
</UL>

<P><STRONG><a name="[108]"></a>InvSqrt(float)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ahrs.o(.text._Z7InvSqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InvSqrt(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(ACCEL, GYRO)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(float*)
</UL>

<P><STRONG><a name="[10b]"></a>SetSine(short*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, main.o(.text._Z7SetSinePs))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SetSine(short*) &rArr; sinf &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>DisplayDEV::Open()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(.text._ZN10DisplayDEV4OpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisplayDEV::Open()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV10DisplayDEV)
</UL>
<P><STRONG><a name="[6b]"></a>DisplayDEV::Close()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(.text._ZN10DisplayDEV5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisplayDEV::Close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV10DisplayDEV)
</UL>
<P><STRONG><a name="[69]"></a>DisplayDEV::Point(int, int, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, display.o(.text._ZN10DisplayDEV5PointEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisplayDEV::Point(int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV10DisplayDEV)
</UL>
<P><STRONG><a name="[16b]"></a>DisplayDEV::DisplayDEV__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(.text._ZN10DisplayDEVC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisplayDEV::DisplayDEV__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
</UL>

<P><STRONG><a name="[6d]"></a>DisplayDEV::~DisplayDEV__deallocating()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN10DisplayDEVD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = DisplayDEV::~DisplayDEV__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::~DisplayDEV__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV10DisplayDEV)
</UL>
<P><STRONG><a name="[6c]"></a>DisplayDEV::~DisplayDEV__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display.o(.text._ZN10DisplayDEVD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisplayDEV::~DisplayDEV__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::~DisplayDEV__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV10DisplayDEV)
</UL>
<P><STRONG><a name="[112]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info__sub_object()
</UL>

<P><STRONG><a name="[312]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[313]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[314]"></a>__cxxabiv1::__array_type_info::~__array_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[315]"></a>__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[316]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[317]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[318]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[319]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31a]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31b]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31c]"></a>__cxxabiv1::__function_type_info::~__function_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31d]"></a>__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31e]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[31f]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[320]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[321]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[322]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[323]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[324]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[325]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[80]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[113]"></a>__cxxabiv1::__free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv120__free_with_fallbackEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[87]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[115]"></a>__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv122__calloc_with_fallbackEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[8b]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[117]"></a>__cxxabiv1::__aligned_free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv128__aligned_free_with_fallbackEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[118]"></a>__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv130__aligned_malloc_with_fallbackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_malloc_with_fallback(unsigned) &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[125]"></a>PID::PID_UpData(float)</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, pid.o(.text._ZN3PID10PID_UpDataEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PID::PID_UpData(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[129]"></a>REC::Subtract(REC, REC&)</STRONG> (Thumb, 760 bytes, Stack size 240 bytes, ui_view.o(.text._ZN3REC8SubtractES_RS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = REC::Subtract(REC, REC&) &rArr; List&lang;REC&rang;::Add(const REC&) &rArr; ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object(const REC&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::~List__sub_object()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::List__sub_object()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[175]"></a>REC::IsContain(REC&, REC&)</STRONG> (Thumb, 206 bytes, Stack size 36 bytes, ui_view.o(.text._ZN3REC9IsContainERS_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = REC::IsContain(REC&, REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[12e]"></a>REC::IsOverlap(REC&, REC&)</STRONG> (Thumb, 418 bytes, Stack size 144 bytes, ui_view.o(.text._ZN3REC9IsOverlapERS_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REC::IsOverlap(REC&, REC&) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[12b]"></a>REC::REC__sub_object(const REC&)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, display.o(.text._ZN3RECC2ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REC::REC__sub_object(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object(const DREC&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>

<P><STRONG><a name="[137]"></a>REC::REC__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(.text._ZN3RECC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REC::REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC(const REC&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC(View&)
</UL>

<P><STRONG><a name="[6f]"></a>REC::~REC__deallocating()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN3RECD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = REC::~REC__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV3REC)
</UL>
<P><STRONG><a name="[6e]"></a>REC::~REC__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display.o(.text._ZN3RECD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REC::~REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__deallocating()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::~ItemNode__sub_object()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV3REC)
</UL>
<P><STRONG><a name="[13c]"></a>REC::operator =(const REC&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, display.o(.text._ZN3RECaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REC::operator =(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::operator =(const DREC&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)
</UL>

<P><STRONG><a name="[130]"></a>AHRS::IMUupdateAG(ACCEL, GYRO)</STRONG> (Thumb, 1304 bytes, Stack size 472 bytes, ahrs.o(.text._ZN4AHRS11IMUupdateAGE5ACCEL4GYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = AHRS::IMUupdateAG(ACCEL, GYRO) &rArr; InvSqrt(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt(float)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[131]"></a>AHRS::IMUupdateAG(float*)</STRONG> (Thumb, 1308 bytes, Stack size 432 bytes, ahrs.o(.text._ZN4AHRS11IMUupdateAGEPf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt(float)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[132]"></a>AHRS::IMUupdateAGM(float*)</STRONG> (Thumb, 1712 bytes, Stack size 568 bytes, ahrs.o(.text._ZN4AHRS12IMUupdateAGMEPf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt(float)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[135]"></a>AHRS::GET_ROLL(AHRS_QuaternionTypeDef)</STRONG> (Thumb, 180 bytes, Stack size 112 bytes, ahrs.o(.text._ZN4AHRS8GET_ROLLE22AHRS_QuaternionTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = AHRS::GET_ROLL(AHRS_QuaternionTypeDef) &rArr; atan2f &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[182]"></a>AHRS::AHRS__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, conrtol.o(.text._ZN4AHRSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AHRS::AHRS__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[177]"></a>DREC::GetDRECType()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ui_view.o(.text._ZN4DREC11GetDRECTypeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DREC::GetDRECType()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[136]"></a>DREC::DREC(View&)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4DRECC2ER4View))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DREC::DREC(View&) &rArr; REC::REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[326]"></a>DREC::DREC__sub_object(View&)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4DRECC2ER4View), UNUSED)

<P><STRONG><a name="[138]"></a>DREC::DREC(const REC&)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4DRECC2ERK3REC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DREC::DREC(const REC&) &rArr; REC::REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[327]"></a>DREC::DREC__sub_object(const REC&)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4DRECC2ERK3REC), UNUSED)

<P><STRONG><a name="[139]"></a>DREC::DREC__sub_object(const DREC&)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, display.o(.text._ZN4DRECC2ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DREC::DREC__sub_object(const DREC&) &rArr; REC::REC__sub_object(const REC&)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[13a]"></a>DREC::DREC__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, display.o(.text._ZN4DRECC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DREC::DREC__sub_object() &rArr; REC::REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)
</UL>

<P><STRONG><a name="[71]"></a>DREC::~DREC__deallocating()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN4DRECD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = DREC::~DREC__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4DREC)
</UL>
<P><STRONG><a name="[70]"></a>DREC::~DREC__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, display.o(.text._ZN4DRECD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DREC::~DREC__sub_object() &rArr; REC::~REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::~ItemNode__sub_object()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__deallocating()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4DREC)
</UL>
<P><STRONG><a name="[13b]"></a>DREC::operator =(const DREC&)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, display.o(.text._ZN4DRECaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DREC::operator =(const DREC&) &rArr; REC::operator =(const REC&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::operator =(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[141]"></a>List&lang;REC&rang;::GetItembyid(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4ListI3RECE11GetItembyidEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = List&lang;REC&rang;::GetItembyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
</UL>

<P><STRONG><a name="[12c]"></a>List&lang;REC&rang;::Add(const REC&)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ui_view.o(.text._ZN4ListI3RECE3AddERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = List&lang;REC&rang;::Add(const REC&) &rArr; ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>

<P><STRONG><a name="[140]"></a>List&lang;REC&rang;::Add(const List&lang;REC&rang;&)</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, ui_view.o(.text._ZN4ListI3RECE3AddERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = List&lang;REC&rang;::Add(const List&lang;REC&rang;&) &rArr; ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object(const REC&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::GetItembyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[142]"></a>List&lang;REC&rang;::Clear()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4ListI3RECE5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = List&lang;REC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::~ItemNode__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::~List__sub_object()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Replace(const List&lang;REC&rang;&)
</UL>

<P><STRONG><a name="[144]"></a>List&lang;REC&rang;::Replace(const List&lang;REC&rang;&)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4ListI3RECE7ReplaceERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;REC&rang;::Replace(const List&lang;REC&rang;&) &rArr; List&lang;REC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[12a]"></a>List&lang;REC&rang;::List__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ui_view.o(.text._ZN4ListI3RECEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = List&lang;REC&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>

<P><STRONG><a name="[12d]"></a>List&lang;REC&rang;::~List__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4ListI3RECED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;REC&rang;::~List__sub_object() &rArr; List&lang;REC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>

<P><STRONG><a name="[146]"></a>List&lang;DREC&rang;::Deletebyid(unsigned)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ui_view.o(.text._ZN4ListI4DRECE10DeletebyidEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Deletebyid(unsigned) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::~ItemNode__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[149]"></a>List&lang;DREC&rang;::GetItembyid(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, display.o(.text._ZN4ListI4DRECE11GetItembyidEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = List&lang;DREC&rang;::GetItembyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[148]"></a>List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&)</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ui_view.o(.text._ZN4ListI4DRECE11ReplacebyidEjRKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::GetItembyid(unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Deletebyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[14b]"></a>List&lang;DREC&rang;::Add(const DREC&)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ui_view.o(.text._ZN4ListI4DRECE3AddERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Add(const DREC&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::Requestpaint(DREC&)
</UL>

<P><STRONG><a name="[14d]"></a>List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)</STRONG> (Thumb, 230 bytes, Stack size 96 bytes, display.o(.text._ZN4ListI4DRECE3AddERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::GetItembyid(unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object(const DREC&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[14e]"></a>List&lang;DREC&rang;::Clear()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, display.o(.text._ZN4ListI4DRECE5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::~ItemNode__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replace(const List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[14f]"></a>List&lang;DREC&rang;::Replace(const List&lang;DREC&rang;&)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ui_view.o(.text._ZN4ListI4DRECE7ReplaceERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::Replace(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[174]"></a>List&lang;DREC&rang;::List__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text._ZN4ListI4DRECEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = List&lang;DREC&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View__sub_object()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[150]"></a>List&lang;DREC&rang;::~List__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, display.o(.text._ZN4ListI4DRECED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::~List__sub_object() &rArr; List&lang;DREC&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::~UICORE__sub_object()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::~View__sub_object()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[151]"></a>List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, display.o(.text._ZN4ListI4DRECEaSERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::operator =(const UICORE&)
</UL>

<P><STRONG><a name="[156]"></a>List&lang;DisplayDEV*&rang;::GetItembyid(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP10DisplayDEVE11GetItembyidEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = List&lang;DisplayDEV*&rang;::GetItembyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
</UL>

<P><STRONG><a name="[152]"></a>List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ui_core_dev.o(.text._ZN4ListIP10DisplayDEVE3AddERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &) &rArr; ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::ItemNode__sub_object(DisplayDEV*const &)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Add_Device(DisplayDEV&)
</UL>

<P><STRONG><a name="[155]"></a>List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, display.o(.text._ZN4ListIP10DisplayDEVE3AddERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&) &rArr; ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::ItemNode__sub_object(DisplayDEV*const &)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::GetItembyid(unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::operator =(const List&lang;DisplayDEV*&rang;&)
</UL>

<P><STRONG><a name="[157]"></a>List&lang;DisplayDEV*&rang;::Clear()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP10DisplayDEVE5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = List&lang;DisplayDEV*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::~ItemNode__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::operator =(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::~List__sub_object()
</UL>

<P><STRONG><a name="[17d]"></a>List&lang;DisplayDEV*&rang;::List__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text._ZN4ListIP10DisplayDEVEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = List&lang;DisplayDEV*&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
</UL>

<P><STRONG><a name="[159]"></a>List&lang;DisplayDEV*&rang;::~List__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP10DisplayDEVED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;DisplayDEV*&rang;::~List__sub_object() &rArr; List&lang;DisplayDEV*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Clear()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::~UICORE__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
</UL>

<P><STRONG><a name="[15a]"></a>List&lang;DisplayDEV*&rang;::operator =(const List&lang;DisplayDEV*&rang;&)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP10DisplayDEVEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = List&lang;DisplayDEV*&rang;::operator =(const List&lang;DisplayDEV*&rang;&) &rArr; List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&) &rArr; ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Clear()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::operator =(const UICORE&)
</UL>

<P><STRONG><a name="[15f]"></a>List&lang;View*&rang;::GetItembyid(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP4ViewE11GetItembyidEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = List&lang;View*&rang;::GetItembyid(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[171]"></a>List&lang;View*&rang;::GetLastItem()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ui_view.o(.text._ZN4ListIP4ViewE11GetLastItemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = List&lang;View*&rang;::GetLastItem()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::AddChildView(View&)
</UL>

<P><STRONG><a name="[15b]"></a>List&lang;View*&rang;::Add(View*const &)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ui_view.o(.text._ZN4ListIP4ViewE3AddERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = List&lang;View*&rang;::Add(View*const &) &rArr; ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::ItemNode__sub_object(View*const &)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Add_View(View&)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::AddChildView(View&)
</UL>

<P><STRONG><a name="[15e]"></a>List&lang;View*&rang;::Add(const List&lang;View*&rang;&)</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, display.o(.text._ZN4ListIP4ViewE3AddERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = List&lang;View*&rang;::Add(const List&lang;View*&rang;&) &rArr; ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::ItemNode__sub_object(View*const &)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::GetItembyid(unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::operator =(const List&lang;View*&rang;&)
</UL>

<P><STRONG><a name="[160]"></a>List&lang;View*&rang;::Clear()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP4ViewE5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::~ItemNode__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::operator =(const List&lang;View*&rang;&)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
</UL>

<P><STRONG><a name="[179]"></a>List&lang;View*&rang;::List__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text._ZN4ListIP4ViewEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = List&lang;View*&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View__sub_object()
</UL>

<P><STRONG><a name="[162]"></a>List&lang;View*&rang;::~List__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP4ViewED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Clear()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::~UICORE__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::~View__sub_object()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View__sub_object()
</UL>

<P><STRONG><a name="[163]"></a>List&lang;View*&rang;::operator =(const List&lang;View*&rang;&)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, display.o(.text._ZN4ListIP4ViewEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = List&lang;View*&rang;::operator =(const List&lang;View*&rang;&) &rArr; List&lang;View*&rang;::Add(const List&lang;View*&rang;&) &rArr; ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Clear()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::operator =(const UICORE&)
</UL>

<P><STRONG><a name="[164]"></a>OLED::Fillrectangle(int, int, int, int, unsigned)</STRONG> (Thumb, 526 bytes, Stack size 88 bytes, display.o(.text._ZN4OLED13FillrectangleEiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OLED::Fillrectangle(int, int, int, int, unsigned) &rArr; OLED096::OLED_SetPos(unsigned char, unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Set8Byte(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_SetPos(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::Draw(REC&)
</UL>

<P><STRONG><a name="[73]"></a>OLED::Open()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, display.o(.text._ZN4OLED4OpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED::Open() &rArr; OLED096::OLED_Fill(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Fill(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_ON()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4OLED)
</UL>
<P><STRONG><a name="[74]"></a>OLED::Close()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, display.o(.text._ZN4OLED5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OLED::Close() &rArr; OLED096::OLED_OFF() &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_OFF()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4OLED)
</UL>
<P><STRONG><a name="[72]"></a>OLED::Point(int, int, unsigned)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, display.o(.text._ZN4OLED5PointEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OLED::Point(int, int, unsigned) &rArr; OLED096::OLED_SetPos(unsigned char, unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Set8Byte(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_SetPos(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4OLED)
</UL>
<P><STRONG><a name="[16a]"></a>OLED::OLED__sub_object()</STRONG> (Thumb, 358 bytes, Stack size 80 bytes, display.o(.text._ZN4OLEDC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = OLED::OLED__sub_object() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED096__sub_object(I2CPORT*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::I2CPORT__sub_object(unsigned short, unsigned short, GPIO_TypeDef*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::~DisplayDEV__sub_object()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::DisplayDEV__sub_object()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[76]"></a>OLED::~OLED__deallocating()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN4OLEDD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = OLED::~OLED__deallocating() &rArr; OLED::~OLED__sub_object() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4OLED)
</UL>
<P><STRONG><a name="[75]"></a>OLED::~OLED__sub_object()</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, display.o(.text._ZN4OLEDD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = OLED::~OLED__sub_object() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::~DisplayDEV__sub_object()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__deallocating()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4OLED)
</UL>
<P><STRONG><a name="[170]"></a>View::AddChildView(View&)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ui_view.o(.text._ZN4View12AddChildViewERS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = View::AddChildView(View&) &rArr; List&lang;View*&rang;::Add(View*const &) &rArr; ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::GetLastItem()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[172]"></a>View::Requestpaint(DREC&)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ui_view.o(.text._ZN4View12RequestpaintER4DREC), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
</UL>

<P><STRONG><a name="[173]"></a>View::EliminationOverlap(List&lang;DREC&rang;&)</STRONG> (Thumb, 542 bytes, Stack size 248 bytes, ui_view.o(.text._ZN4View18EliminationOverlapER4ListI4DRECE))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = View::EliminationOverlap(List&lang;DREC&rang;&) &rArr; REC::Subtract(REC, REC&) &rArr; List&lang;REC&rang;::Add(const REC&) &rArr; ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::List__sub_object()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::GetItembyid(unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object(const DREC&)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object(const REC&)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replace(const List&lang;DREC&rang;&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Deletebyid(unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::~List__sub_object()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::GetItembyid(unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC(const REC&)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsContain(REC&, REC&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[176]"></a>View::GetDREC(List&lang;DREC&rang;&)</STRONG> (Thumb, 1918 bytes, Stack size 896 bytes, ui_view.o(.text._ZN4View7GetDRECER4ListI4DRECE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1892 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = View::GetDREC(List&lang;DREC&rang;&) &rArr;  View::GetDREC(List&lang;DREC&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::GetItembyid(unsigned)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::List__sub_object()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::GetItembyid(unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::operator =(const DREC&)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object(const DREC&)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object(const REC&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::EliminationOverlap(List&lang;DREC&rang;&)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replace(const List&lang;DREC&rang;&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Deletebyid(unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::~List__sub_object()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::List__sub_object()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Replace(const List&lang;REC&rang;&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::GetItembyid(unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC(const REC&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC(View&)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::GetDRECType()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsContain(REC&, REC&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::Subtract(REC, REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[178]"></a>View::View__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, display.o(.text._ZN4ViewC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = View::View__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::List__sub_object()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::RecView__sub_object(unsigned)
</UL>

<P><STRONG><a name="[78]"></a>View::~View__deallocating()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(.text._ZN4ViewD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = View::~View__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4View)
</UL>
<P><STRONG><a name="[77]"></a>View::~View__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, display.o(.text._ZN4ViewD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = View::~View__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::~RecView__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4View)
</UL>
<P><STRONG><a name="[17a]"></a>UICORE::Add_Device(DisplayDEV&)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ui_core_dev.o(.text._ZN6UICORE10Add_DeviceER10DisplayDEV))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = UICORE::Add_Device(DisplayDEV&) &rArr; List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &) &rArr; ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[17b]"></a>UICORE::Add_View(View&)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ui_core_dev.o(.text._ZN6UICORE8Add_ViewER4View))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = UICORE::Add_View(View&) &rArr; List&lang;View*&rang;::Add(View*const &) &rArr; ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[f5]"></a>UICORE::Task_Draw()</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, ui_core_task_eraw.o(.text._ZN6UICORE9Task_DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1988 + Unknown Stack Size
<LI>Call Chain = UICORE::Task_Draw() &rArr; View::GetDREC(List&lang;DREC&rang;&) &rArr;  View::GetDREC(List&lang;DREC&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::GetItembyid(unsigned)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::GetItembyid(unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::GetItembyid(unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object(const DREC&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::GetDREC(List&lang;DREC&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UI_Draw
</UL>

<P><STRONG><a name="[17c]"></a>UICORE::UICORE__sub_object()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, display.o(.text._ZN6UICOREC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = UICORE::UICORE__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::List__sub_object()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::~List__sub_object()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::List__sub_object()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Task_Draw()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[17e]"></a>UICORE::~UICORE__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, display.o(.text._ZN6UICORED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = UICORE::~UICORE__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::~List__sub_object()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[17f]"></a>UICORE::operator =(const UICORE&)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, display.o(.text._ZN6UICOREaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = UICORE::operator =(const UICORE&) &rArr; List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::operator =(const List&lang;View*&rang;&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::operator =(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[f1]"></a>Conrtol::Task_Count()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, conrtol.o(.text._ZN7Conrtol10Task_CountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Conrtol::Task_Count() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Count
</UL>

<P><STRONG><a name="[f2]"></a>Conrtol::Task_GetAttitude()</STRONG> (Thumb, 628 bytes, Stack size 288 bytes, conrtol.o(.text._ZN7Conrtol16Task_GetAttitudeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = Conrtol::Task_GetAttitude() &rArr; AHRS::IMUupdateAG(ACCEL, GYRO) &rArr; InvSqrt(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL_GYRO(ACCEL*, GYRO*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::AHRS__sub_object()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::GET_ROLL(AHRS_QuaternionTypeDef)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(ACCEL, GYRO)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetAttitude
</UL>

<P><STRONG><a name="[f0]"></a>Conrtol::Task_BB()</STRONG> (Thumb, 302 bytes, Stack size 80 bytes, conrtol.o(.text._ZN7Conrtol7Task_BBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Conrtol::Task_BB() &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BB
</UL>

<P><STRONG><a name="[f3]"></a>Conrtol::Task_Moto()</STRONG> (Thumb, 682 bytes, Stack size 104 bytes, conrtol.o(.text._ZN7Conrtol9Task_MotoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = Conrtol::Task_Moto() &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::~PWMPORT__sub_object()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Moto
</UL>

<P><STRONG><a name="[191]"></a>Conrtol::Conrtol()</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, conrtol.o(.text._ZN7ConrtolC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Conrtol::Conrtol() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[328]"></a>Conrtol::Conrtol__sub_object()</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, conrtol.o(.text._ZN7ConrtolC2Ev), UNUSED)

<P><STRONG><a name="[194]"></a>Display::Display()</STRONG> (Thumb, 298 bytes, Stack size 264 bytes, display.o(.text._ZN7DisplayC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + Unknown Stack Size
<LI>Call Chain = Display::Display() &rArr; UICORE::operator =(const UICORE&) &rArr; List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::~RecView__sub_object()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::RecView__sub_object(unsigned)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::operator =(const UICORE&)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::~UICORE__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::UICORE__sub_object()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Add_View(View&)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICORE::Add_Device(DisplayDEV&)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::AddChildView(View&)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[329]"></a>Display::Display__sub_object()</STRONG> (Thumb, 298 bytes, Stack size 264 bytes, display.o(.text._ZN7DisplayC2Ev), UNUSED)

<P><STRONG><a name="[197]"></a>I2CPORT::Signal_Ack()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT10Signal_AckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2CPORT::Signal_Ack() &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[199]"></a>I2CPORT::SDA_ToInput()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT11SDA_ToInputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2CPORT::SDA_ToInput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>

<P><STRONG><a name="[19a]"></a>I2CPORT::Signal_Nack()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT11Signal_NackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2CPORT::Signal_Nack() &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[19b]"></a>I2CPORT::SDA_ToOutput()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT12SDA_ToOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>

<P><STRONG><a name="[19c]"></a>I2CPORT::Signal_Check()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, i2c.o(.text._ZN7I2CPORT12Signal_CheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToOutput()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToInput()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19d]"></a>I2CPORT::Signal_Read8bit()</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, i2c.o(.text._ZN7I2CPORT15Signal_Read8bitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToOutput()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::SDA_ToInput()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[19e]"></a>I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, i2c.o(.text._ZN7I2CPORT16Device_ReadN8bitEhhhhPh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Nack()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Ack()
</UL>

<P><STRONG><a name="[1a3]"></a>I2CPORT::Signal_Write8bit(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, i2c.o(.text._ZN7I2CPORT16Signal_Write8bitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2CPORT::Signal_Write8bit(unsigned char) &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a4]"></a>I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, i2c.o(.text._ZN7I2CPORT17Device_WriteN8bitEhhh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>

<P><STRONG><a name="[1a5]"></a>I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, i2c.o(.text._ZN7I2CPORT17Device_WriteN8bitEhhhPh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>

<P><STRONG><a name="[1a6]"></a>I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, i2c.o(.text._ZN7I2CPORT17Device_WriteN8bitEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Init()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Fill(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_OFF()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_ON()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Set8Byte(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_SetPos(unsigned char, unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_ShowStr(unsigned char, unsigned char, const char*)
</UL>

<P><STRONG><a name="[19f]"></a>I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, i2c.o(.text._ZN7I2CPORT17Device_WriteN8bitEhhhhPh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1a2]"></a>I2CPORT::Signal_GenerateSTOP()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT19Signal_GenerateSTOPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2CPORT::Signal_GenerateSTOP() &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a0]"></a>I2CPORT::Signal_GenerateSTART()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT20Signal_GenerateSTARTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2CPORT::Signal_GenerateSTART() &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a1]"></a>I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, i2c.o(.text._ZN7I2CPORT22Signal_Send7bitAddressEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char) &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_ReadN8bit(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a7]"></a>I2CPORT::Init()</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, i2c.o(.text._ZN7I2CPORT4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2CPORT::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::I2CPORT__sub_object(unsigned short, unsigned short, GPIO_TypeDef*)
</UL>

<P><STRONG><a name="[198]"></a>I2CPORT::Wait()</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, i2c.o(.text._ZN7I2CPORT4WaitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2CPORT::Wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Nack()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Ack()
</UL>

<P><STRONG><a name="[16d]"></a>I2CPORT::I2CPORT__sub_object(unsigned short, unsigned short, GPIO_TypeDef*)</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, display.o(.text._ZN7I2CPORTC2EttP12GPIO_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2CPORT::I2CPORT__sub_object(unsigned short, unsigned short, GPIO_TypeDef*) &rArr; I2CPORT::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
</UL>

<P><STRONG><a name="[165]"></a>OLED096::OLED_SetPos(unsigned char, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, 096oled.o(.text._ZN7OLED09611OLED_SetPosEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OLED096::OLED_SetPos(unsigned char, unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Point(int, int, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Fillrectangle(int, int, int, int, unsigned)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_ShowStr(unsigned char, unsigned char, const char*)
</UL>

<P><STRONG><a name="[1a8]"></a>OLED096::OLED_ShowStr(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, 096oled.o(.text._ZN7OLED09612OLED_ShowStrEhhPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_SetPos(unsigned char, unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>OLED096::OLED_Set8Byte(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, 096oled.o(.text._ZN7OLED09613OLED_Set8ByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OLED096::OLED_Set8Byte(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Point(int, int, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Fillrectangle(int, int, int, int, unsigned)
</UL>

<P><STRONG><a name="[167]"></a>OLED096::OLED_ON()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, 096oled.o(.text._ZN7OLED0967OLED_ONEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED096::OLED_ON() &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Open()
</UL>

<P><STRONG><a name="[1a9]"></a>OLED096::OLED_CLS()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, 096oled.o(.text._ZN7OLED0968OLED_CLSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OLED096::OLED_CLS() &rArr; OLED096::OLED_Fill(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Fill(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Init()
</UL>

<P><STRONG><a name="[169]"></a>OLED096::OLED_OFF()</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, 096oled.o(.text._ZN7OLED0968OLED_OFFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED096::OLED_OFF() &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Close()
</UL>

<P><STRONG><a name="[1ab]"></a>OLED096::delay_ms(unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, 096oled.o(.text._ZN7OLED0968delay_msEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED096::delay_ms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Init()
</UL>

<P><STRONG><a name="[168]"></a>OLED096::OLED_Fill(unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, 096oled.o(.text._ZN7OLED0969OLED_FillEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OLED096::OLED_Fill(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Open()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_CLS()
</UL>

<P><STRONG><a name="[1aa]"></a>OLED096::OLED_Init()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, 096oled.o(.text._ZN7OLED0969OLED_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED096::OLED_Init() &rArr; OLED096::OLED_CLS() &rArr; OLED096::OLED_Fill(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::delay_ms(unsigned short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_CLS()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED096__sub_object(I2CPORT*)
</UL>

<P><STRONG><a name="[16e]"></a>OLED096::OLED096__sub_object(I2CPORT*)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, display.o(.text._ZN7OLED096C2EP7I2CPORT))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OLED096::OLED096__sub_object(I2CPORT*) &rArr; OLED096::OLED_Init() &rArr; OLED096::OLED_CLS() &rArr; OLED096::OLED_Fill(unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED096::OLED_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
</UL>

<P><STRONG><a name="[207]"></a>PCM5102::Buffer_1_Set(void*, unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, pcm5102.o(.text._ZN7PCM510212Buffer_1_SetEPvtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCM5102::Buffer_1_Set(void*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>PCM5102::Buffer_2_Set(void*, unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, pcm5102.o(.text._ZN7PCM510212Buffer_2_SetEPvtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCM5102::Buffer_2_Set(void*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>PCM5102::Init(BufferStruct*, BufferStruct*)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pcm5102.o(.text._ZN7PCM51024InitEP12BufferStructS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PCM5102::Init(BufferStruct*, BufferStruct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>PCM5102::Play()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pcm5102.o(.text._ZN7PCM51024PlayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCM5102::Play() &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>PCM5102::PCM5102()</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, pcm5102.o(.text._ZN7PCM5102C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PCM5102::PCM5102() &rArr; I2S_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32a]"></a>PCM5102::PCM5102__sub_object()</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, pcm5102.o(.text._ZN7PCM5102C2Ev), UNUSED)

<P><STRONG><a name="[1b2]"></a>PWMPORT::ON()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pwm.o(.text._ZN7PWMPORT2ONEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMPORT::ON() &rArr; TIM_CtrlPWMOutputs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
</UL>

<P><STRONG><a name="[18d]"></a>PWMPORT::Init()</STRONG> (Thumb, 728 bytes, Stack size 88 bytes, pwm.o(.text._ZN7PWMPORT4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PWMPORT::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::ON()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
</UL>

<P><STRONG><a name="[18e]"></a>PWMPORT::SetPort_0(float)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pwm.o(.text._ZN7PWMPORT9SetPort_0Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWMPORT::SetPort_0(float) &rArr; TIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
</UL>

<P><STRONG><a name="[18f]"></a>PWMPORT::SetPort_1(float)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pwm.o(.text._ZN7PWMPORT9SetPort_1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWMPORT::SetPort_1(float) &rArr; TIM_SetCompare2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
</UL>

<P><STRONG><a name="[190]"></a>PWMPORT::~PWMPORT__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, conrtol.o(.text._ZN7PWMPORTD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWMPORT::~PWMPORT__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
</UL>

<P><STRONG><a name="[7e]"></a>RecView::Draw(REC&)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, display.o(.text._ZN7RecView4DrawER3REC))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RecView::Draw(REC&) &rArr; OLED::Fillrectangle(int, int, int, int, unsigned) &rArr; OLED096::OLED_SetPos(unsigned char, unsigned char) &rArr; I2CPORT::Device_WriteN8bit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::Fillrectangle(int, int, int, int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV7RecView)
</UL>
<P><STRONG><a name="[7d]"></a>RecView::OnDraw()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, display.o(.text._ZN7RecView6OnDrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RecView::OnDraw() &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV7RecView)
</UL>
<P><STRONG><a name="[7c]"></a>RecView::OnToch(float, float)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, display.o(.text._ZN7RecView6OnTochEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RecView::OnToch(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV7RecView)
</UL>
<P><STRONG><a name="[196]"></a>RecView::RecView__sub_object(unsigned)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, display.o(.text._ZN7RecViewC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = RecView::RecView__sub_object(unsigned) &rArr; View::View__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[7b]"></a>RecView::~RecView__deallocating()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(.text._ZN7RecViewD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = RecView::~RecView__deallocating() &rArr; RecView::~RecView__sub_object() &rArr; View::~View__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::~RecView__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV7RecView)
</UL>
<P><STRONG><a name="[7a]"></a>RecView::~RecView__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, display.o(.text._ZN7RecViewD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = RecView::~RecView__sub_object() &rArr; View::~View__sub_object() &rArr; List&lang;View*&rang;::~List__sub_object() &rArr; List&lang;View*&rang;::Clear() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::~View__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::~RecView__deallocating()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV7RecView)
</UL>
<P><STRONG><a name="[184]"></a>mpu6050::Get_ACCEL_GYRO(ACCEL*, GYRO*)</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, mpu6050.o(.text._ZN7mpu605014Get_ACCEL_GYROEP5ACCELP4GYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mpu6050::Get_ACCEL_GYRO(ACCEL*, GYRO*) &rArr; mpu6050::Get_ACCEL(float*) &rArr; mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL(float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[1cb]"></a>mpu6050::Get_ACCEL_GYRO(float*)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, mpu6050.o(.text._ZN7mpu605014Get_ACCEL_GYROEPf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL(float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
</UL>

<P><STRONG><a name="[181]"></a>mpu6050::MPU_6050_FixZero()</STRONG> (Thumb, 378 bytes, Stack size 72 bytes, mpu6050.o(.text._ZN7mpu605016MPU_6050_FixZeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mpu6050::MPU_6050_FixZero() &rArr; mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[1cd]"></a>mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, mpu6050.o(.text._ZN7mpu605021MPU6050_I2C_ByteWriteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Check() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
</UL>

<P><STRONG><a name="[1cc]"></a>mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, mpu6050.o(.text._ZN7mpu605022MPU6050_I2C_BufferReadEhPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Send7bitAddress(unsigned char, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTART()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_GenerateSTOP()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Write8bit(unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Read8bit()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Check()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Nack()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::Signal_Ack()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL(float*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_TEMP(float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
</UL>

<P><STRONG><a name="[1ca]"></a>mpu6050::Get_GYRO(float*)</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, mpu6050.o(.text._ZN7mpu60508Get_GYROEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mpu6050::Get_GYRO(float*) &rArr; mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL_GYRO(ACCEL*, GYRO*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL_GYRO(float*)
</UL>

<P><STRONG><a name="[1ce]"></a>mpu6050::Get_TEMP(float*)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mpu6050.o(.text._ZN7mpu60508Get_TEMPEPf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1c9]"></a>mpu6050::Get_ACCEL(float*)</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mpu6050.o(.text._ZN7mpu60509Get_ACCELEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mpu6050::Get_ACCEL(float*) &rArr; mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; I2CPORT::Signal_Read8bit() &rArr; I2CPORT::SDA_ToOutput() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL_GYRO(ACCEL*, GYRO*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL_GYRO(float*)
</UL>

<P><STRONG><a name="[180]"></a>mpu6050::mpu6050()</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, mpu6050.o(.text._ZN7mpu6050C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = mpu6050::mpu6050() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPORT::I2CPORT__sub_object(unsigned short, unsigned short, GPIO_TypeDef*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_BufferRead(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU6050_I2C_ByteWrite(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
</UL>

<P><STRONG><a name="[32b]"></a>mpu6050::mpu6050__sub_object()</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, mpu6050.o(.text._ZN7mpu6050C2Ev), UNUSED)

<P><STRONG><a name="[13f]"></a>ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ui_view.o(.text._ZN8ItemNodeI3RECE18CreateNextItemNodeERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
</UL>

<P><STRONG><a name="[13e]"></a>ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ui_view.o(.text._ZN8ItemNodeI3RECEC2ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ItemNode&lang;REC&rang;::ItemNode__sub_object(const REC&) &rArr; REC::operator =(const REC&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::operator =(const REC&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
</UL>

<P><STRONG><a name="[143]"></a>ItemNode&lang;REC&rang;::~ItemNode__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ui_view.o(.text._ZN8ItemNodeI3RECED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ItemNode&lang;REC&rang;::~ItemNode__sub_object() &rArr; REC::~REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Clear()
</UL>

<P><STRONG><a name="[14a]"></a>ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, display.o(.text._ZN8ItemNodeI4DRECE18CreateNextItemNodeERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Replacebyid(unsigned, const List&lang;DREC&rang;&)
</UL>

<P><STRONG><a name="[14c]"></a>ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, display.o(.text._ZN8ItemNodeI4DRECEC2ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ItemNode&lang;DREC&rang;::ItemNode__sub_object(const DREC&) &rArr; DREC::operator =(const DREC&) &rArr; REC::operator =(const REC&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::operator =(const DREC&)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::DREC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
</UL>

<P><STRONG><a name="[147]"></a>ItemNode&lang;DREC&rang;::~ItemNode__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, display.o(.text._ZN8ItemNodeI4DRECED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ItemNode&lang;DREC&rang;::~ItemNode__sub_object() &rArr; DREC::~DREC__sub_object() &rArr; REC::~REC__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Deletebyid(unsigned)
</UL>

<P><STRONG><a name="[154]"></a>ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, display.o(.text._ZN8ItemNodeIP10DisplayDEVE18CreateNextItemNodeERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::ItemNode__sub_object(DisplayDEV*const &)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
</UL>

<P><STRONG><a name="[153]"></a>ItemNode&lang;DisplayDEV*&rang;::ItemNode__sub_object(DisplayDEV*const &)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(.text._ZN8ItemNodeIP10DisplayDEVEC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItemNode&lang;DisplayDEV*&rang;::ItemNode__sub_object(DisplayDEV*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
</UL>

<P><STRONG><a name="[158]"></a>ItemNode&lang;DisplayDEV*&rang;::~ItemNode__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, display.o(.text._ZN8ItemNodeIP10DisplayDEVED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItemNode&lang;DisplayDEV*&rang;::~ItemNode__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Clear()
</UL>

<P><STRONG><a name="[15d]"></a>ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, display.o(.text._ZN8ItemNodeIP4ViewE18CreateNextItemNodeERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::ItemNode__sub_object(View*const &)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
</UL>

<P><STRONG><a name="[15c]"></a>ItemNode&lang;View*&rang;::ItemNode__sub_object(View*const &)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(.text._ZN8ItemNodeIP4ViewEC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItemNode&lang;View*&rang;::ItemNode__sub_object(View*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
</UL>

<P><STRONG><a name="[161]"></a>ItemNode&lang;View*&rang;::~ItemNode__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, display.o(.text._ZN8ItemNodeIP4ViewED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItemNode&lang;View*&rang;::~ItemNode__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Clear()
</UL>

<P><STRONG><a name="[9c]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[93]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(unsigned long long*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[94]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(unsigned long long*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[98]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d2]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13stepWithEHABIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_eht_entry
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()
</UL>

<P><STRONG><a name="[92]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[99]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9b]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::getRegisterName(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d5]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
</UL>

<P><STRONG><a name="[9a]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[95]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step() &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[90]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[97]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreCoreAndJumpTo()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[91]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[96]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[8f]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[8e]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d4]"></a>libunwind::Registers_arm::getRegisterName(int)</STRONG> (Thumb, 916 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm15getRegisterNameEi))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)
</UL>

<P><STRONG><a name="[1d7]"></a>libunwind::Registers_arm::restoreSavedFloatRegisters()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm26restoreSavedFloatRegistersEv))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPv3(unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[8d]"></a>libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[81]"></a>__cxxabiv1::__shim_type_info::noop1() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[82]"></a>__cxxabiv1::__shim_type_info::noop2() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[84]"></a>__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[85]"></a>__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[86]"></a>__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[1dd]"></a>__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[83]"></a>__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1df]"></a>__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1e0]"></a>__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1e2]"></a>__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 406 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[88]"></a>__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[89]"></a>__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 214 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[8a]"></a>__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1e3]"></a>__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>

<P><STRONG><a name="[8c]"></a>__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[1e1]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>

<P><STRONG><a name="[1e4]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[9e]"></a>std::bad_exception::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[a0]"></a>std::bad_array_length::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt16bad_array_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
</UL>
<P><STRONG><a name="[a2]"></a>std::bad_array_new_length::what() const</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[a4]"></a>std::bad_alloc::what() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[9d]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[32c]"></a>std::bad_array_length::bad_array_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthC2Ev), UNUSED)

<P><STRONG><a name="[32d]"></a>std::bad_array_length::bad_array_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthC2Ev), UNUSED)

<P><STRONG><a name="[9f]"></a>std::bad_array_length::~bad_array_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt16bad_array_lengthD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = std::bad_array_length::~bad_array_length__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
</UL>
<P><STRONG><a name="[32e]"></a>std::bad_array_new_length::bad_array_new_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[32f]"></a>std::bad_array_new_length::bad_array_new_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>std::bad_array_new_length::~bad_array_new_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = std::bad_array_new_length::~bad_array_new_length__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[1d6]"></a>T2 std::__1::__upper_bound&lang;std::__1::__less&lang;unsigned, unsigned&rang;&, libunwind::EHABISectionIterator&lang;libunwind::LocalAddressSpace&rang;, unsigned&rang;(T2, T2, const T3&, T1)</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZNSt3__113__upper_boundIRNS_6__lessIjjEEN9libunwind20EHABISectionIteratorINS4_17LocalAddressSpaceEEEjEET0_S8_S8_RKT1_T_))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>

<P><STRONG><a name="[330]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)

<P><STRONG><a name="[331]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[2]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> cxa_personality.cpp.o(.text.__cxa_call_unexpected)
</UL>
<P><STRONG><a name="[332]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[333]"></a>std::bad_array_length::~bad_array_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[334]"></a>std::bad_array_length::~bad_array_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[335]"></a>std::bad_array_new_length::~bad_array_new_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[336]"></a>std::bad_array_new_length::~bad_array_new_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[337]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[338]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[339]"></a>std::exception::~exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[b]"></a>std::exception::~exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 4]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt16bad_array_length)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[33a]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)

<P><STRONG><a name="[a]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__enum_type_info::~__enum_type_info()
</UL>

<P><STRONG><a name="[1e5]"></a>std::unexpected()</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt10unexpectedv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
</UL>

<P><STRONG><a name="[120]"></a>std::__terminate(void(*)())</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>

<P><STRONG><a name="[1e6]"></a>std::__unexpected(void(*)())</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt12__unexpectedPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__unexpected(void(*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1f4]"></a>std::get_terminate()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt13get_terminatev))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[33b]"></a>std::set_terminate(void(*)())</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE), UNUSED)

<P><STRONG><a name="[1f5]"></a>std::get_unexpected()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt14get_unexpectedv))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[33c]"></a>std::set_unexpected(void(*)())</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE), UNUSED)

<P><STRONG><a name="[5f]"></a>std::terminate()</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[16f]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1ea]"></a>operator delete[] (void*, const std::nothrow_t&)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1eb]"></a>operator delete[] (void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[111]"></a>operator delete (void*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::~RecView__deallocating()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__deallocating()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Clear()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Clear()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Clear()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DREC::~DREC__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::~REC__deallocating()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDEV::~DisplayDEV__deallocating()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Deletebyid(unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Clear()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_new_length::~bad_array_new_length__deallocating()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_length::~bad_array_length__deallocating()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>

<P><STRONG><a name="[16c]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1ed]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[13d]"></a>operator new(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;View*&rang;::CreateNextItemNode(View*const &)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DisplayDEV*&rang;::CreateNextItemNode(DisplayDEV*const &)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::OLED__sub_object()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(const List&lang;View*&rang;&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(const List&lang;DisplayDEV*&rang;&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNode&lang;REC&rang;::CreateNextItemNode(const REC&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::Add(View*const &)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::Add(const DREC&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const List&lang;REC&rang;&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::Add(const REC&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::Add(DisplayDEV*const &)
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[5c]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[5d]"></a>__aeabi_unwind_cpp_pr2</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[145]"></a>__clang_call_terminate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text.__clang_call_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED::~OLED__sub_object()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;View*&rang;::~List__sub_object()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DisplayDEV*&rang;::~List__sub_object()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;DREC&rang;::~List__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List&lang;REC&rang;::~List__sub_object()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1ef]"></a>__cxa_allocate_dependent_exception</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_dependent_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[1f0]"></a>__cxa_allocate_exception</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[11f]"></a>__cxa_begin_catch</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1f3]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[1f1]"></a>__cxa_call_unexpected</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__cxa_call_unexpected))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[122]"></a>__cxa_decrement_exception_refcount</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_decrement_exception_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __cxa_decrement_exception_refcount &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[1e8]"></a>__cxa_end_catch</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; __cxa_decrement_exception_refcount &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1f2]"></a>__cxa_get_globals</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[1e9]"></a>__cxa_get_globals_fast</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals_fast))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[205]"></a>__cxa_guard_acquire</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.rodata._ZTV4View)
</UL>
<P><STRONG><a name="[1f7]"></a>__cxa_rethrow</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_rethrow &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1f9]"></a>__cxa_rethrow_primary_exception</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[1f6]"></a>__cxa_throw</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1de]"></a>__dynamic_cast</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text.__dynamic_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __dynamic_cast &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1fa]"></a>__gnu_unwind_frame</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__gnu_unwind_frame))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[68]"></a>__gxx_personality_v0</STRONG> (Thumb, 370 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__gxx_personality_v0))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = __gxx_personality_v0 &rArr; __cxa_begin_cleanup &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
</UL>
<BR>[Address Reference Count : 37]<UL><LI> display.o(.ARM.extab.text._ZN7DisplayC2Ev)
<LI> conrtol.o(.ARM.extab.text._ZN7Conrtol9Task_MotoEv)
<LI> ui_core_task_eraw.o(.ARM.extab.text._ZN6UICORE9Task_DrawEv)
<LI> main.o(.ARM.extab.text.main)
<LI> main.o(.ARM.extab.text._ZdlPv)
<LI> mpu6050.o(.ARM.extab.text._ZN7mpu6050C2Ev)
<LI> display.o(.ARM.extab.text._ZN6UICOREC2Ev)
<LI> display.o(.ARM.extab.text._ZN4OLEDC2Ev)
<LI> display.o(.ARM.extab.text._ZN4OLEDD2Ev)
<LI> display.o(.ARM.extab.text._ZN4ListIP4ViewED2Ev)
<LI> display.o(.ARM.extab.text._ZN4ListIP10DisplayDEVED2Ev)
<LI> display.o(.ARM.extab.text._ZN4ListIP10DisplayDEVE3AddERKS2_)
<LI> display.o(.ARM.extab.text._ZN8ItemNodeIP10DisplayDEVE18CreateNextItemNodeERKS1_)
<LI> display.o(.ARM.extab.text._ZN4ListIP4ViewE3AddERKS2_)
<LI> display.o(.ARM.extab.text._ZN8ItemNodeIP4ViewE18CreateNextItemNodeERKS1_)
<LI> display.o(.ARM.extab.text._ZN4ListI4DRECE3AddERKS1_)
<LI> display.o(.ARM.extab.text._ZN8ItemNodeI4DRECE18CreateNextItemNodeERKS0_)
<LI> display.o(.ARM.extab.text._ZN4ListI4DRECED2Ev)
<LI> display.o(.ARM.extab.text._ZN4ViewC2Ev)
<LI> ui_view.o(.ARM.extab.text._ZN4View7GetDRECER4ListI4DRECE)
<LI> ui_view.o(.ARM.extab.text._ZN4View18EliminationOverlapER4ListI4DRECE)
<LI> ui_view.o(.ARM.extab.text._ZN4ListI3RECED2Ev)
<LI> ui_view.o(.ARM.extab.text._ZN4ListI3RECE3AddERKS0_)
<LI> ui_view.o(.ARM.extab.text._ZN4ListI3RECE3AddERKS1_)
<LI> ui_core_dev.o(.ARM.extab.text._ZN4ListIP10DisplayDEVE3AddERKS1_)
<LI> ui_view.o(.ARM.extab.text._ZN4ListI4DRECE3AddERKS0_)
<LI> ui_view.o(.ARM.extab.text._ZN3REC8SubtractES_RS_)
<LI> ui_view.o(.ARM.extab.text._ZN4ListIP4ViewE3AddERKS1_)
<LI> ui_view.o(.ARM.extab.text._ZN8ItemNodeI3RECE18CreateNextItemNodeERKS0_)
<LI> new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
<LI> cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
</UL>
<P><STRONG><a name="[d6]"></a>__user_perthread_libspace</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, clib_arm.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[a7]"></a>_mutex_acquire</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, clib_arm.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[a9]"></a>_mutex_free</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, clib_arm.o(.text._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[a6]"></a>_mutex_initialize</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, clib_arm.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _mutex_initialize &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[a8]"></a>_mutex_release</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, clib_arm.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[b8]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, clib_arm.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[1e7]"></a>abort_message</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[1d3]"></a>decode_eht_entry</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.decode_eht_entry))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[202]"></a>eTaskGetState</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(.text.eTaskGetState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[bc]"></a>main</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = main &rArr; Display::Display() &rArr; UICORE::operator =(const UICORE&) &rArr; List&lang;DREC&rang;::operator =(const List&lang;DREC&rang;&) &rArr; List&lang;DREC&rang;::Add(const List&lang;DREC&rang;&) &rArr; ItemNode&lang;DREC&rang;::CreateNextItemNode(const DREC&) &rArr; operator delete (void*) &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Conrtol()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::PCM5102()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Play()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Init(BufferStruct*, BufferStruct*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Buffer_2_Set(void*, unsigned short, unsigned short)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCM5102::Buffer_1_Set(void*, unsigned short, unsigned short)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20a]"></a>osDelay</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osDelay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[20b]"></a>osDelayUntil</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osDelayUntil), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[20c]"></a>osEventFlagsClear</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osEventFlagsClear), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBitsFromISR
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[210]"></a>osEventFlagsDelete</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osEventFlagsDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[212]"></a>osEventFlagsGet</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osEventFlagsGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[213]"></a>osEventFlagsNew</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osEventFlagsNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>

<P><STRONG><a name="[215]"></a>osEventFlagsSet</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osEventFlagsSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>

<P><STRONG><a name="[217]"></a>osEventFlagsWait</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, cmsis_os2.o(.text.osEventFlagsWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[218]"></a>osKernelGetState</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmsis_os2.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[21a]"></a>osKernelGetTickCount</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osKernelGetTickCount), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[201]"></a>osKernelInitialize</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, cmsis_os2.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[21c]"></a>osKernelLock</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osKernelLock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[21e]"></a>osKernelRestoreLock</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osKernelRestoreLock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[220]"></a>osKernelStart</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osKernelStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[221]"></a>osKernelUnlock</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osKernelUnlock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[222]"></a>osMessageQueueDelete</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osMessageQueueDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[224]"></a>osMessageQueueGet</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, cmsis_os2.o(.text.osMessageQueueGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[227]"></a>osMessageQueueGetCount</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osMessageQueueGetCount), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[22a]"></a>osMessageQueueGetSpace</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, cmsis_os2.o(.text.osMessageQueueGetSpace), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>

<P><STRONG><a name="[22c]"></a>osMessageQueueNew</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, cmsis_os2.o(.text.osMessageQueueNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[22f]"></a>osMessageQueuePut</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, cmsis_os2.o(.text.osMessageQueuePut), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[232]"></a>osMessageQueueReset</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osMessageQueueReset), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1fd]"></a>osMutexAcquire</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[1fe]"></a>osMutexDelete</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[236]"></a>osMutexGetOwner</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osMutexGetOwner), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
</UL>

<P><STRONG><a name="[1ff]"></a>osMutexNew</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[200]"></a>osMutexRelease</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[23b]"></a>osSemaphoreAcquire</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, cmsis_os2.o(.text.osSemaphoreAcquire), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[23c]"></a>osSemaphoreDelete</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osSemaphoreDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[23d]"></a>osSemaphoreGetCount</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osSemaphoreGetCount), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[23e]"></a>osSemaphoreNew</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, cmsis_os2.o(.text.osSemaphoreNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[241]"></a>osSemaphoreRelease</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osSemaphoreRelease), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[243]"></a>osThreadEnumerate</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, cmsis_os2.o(.text.osThreadEnumerate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
</UL>

<P><STRONG><a name="[246]"></a>osThreadFlagsClear</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadFlagsClear), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>

<P><STRONG><a name="[249]"></a>osThreadFlagsGet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osThreadFlagsGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>

<P><STRONG><a name="[24a]"></a>osThreadFlagsSet</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, cmsis_os2.o(.text.osThreadFlagsSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>

<P><STRONG><a name="[24c]"></a>osThreadFlagsWait</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, cmsis_os2.o(.text.osThreadFlagsWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
</UL>

<P><STRONG><a name="[24e]"></a>osThreadGetCount</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osThreadGetCount), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
</UL>

<P><STRONG><a name="[1fc]"></a>osThreadGetId</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osThreadGetId &rArr; xTaskGetCurrentTaskHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[24f]"></a>osThreadGetName</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadGetName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>

<P><STRONG><a name="[251]"></a>osThreadGetPriority</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadGetPriority), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>

<P><STRONG><a name="[253]"></a>osThreadGetStackSpace</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadGetStackSpace), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[254]"></a>osThreadGetState</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadGetState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[255]"></a>osThreadNew</STRONG> (Thumb, 440 bytes, Stack size 96 bytes, cmsis_os2.o(.text.osThreadNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[257]"></a>osThreadResume</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadResume), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[259]"></a>osThreadSetPriority</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osThreadSetPriority), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>

<P><STRONG><a name="[25b]"></a>osThreadSuspend</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadSuspend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[25d]"></a>osThreadTerminate</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadTerminate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[33d]"></a>osThreadYield</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cmsis_os2.o(.text.osThreadYield), UNUSED)

<P><STRONG><a name="[25f]"></a>osTimerDelete</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osTimerDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>

<P><STRONG><a name="[261]"></a>osTimerGetName</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osTimerGetName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
</UL>

<P><STRONG><a name="[263]"></a>osTimerIsRunning</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osTimerIsRunning), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
</UL>

<P><STRONG><a name="[265]"></a>osTimerNew</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, cmsis_os2.o(.text.osTimerNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[268]"></a>osTimerStart</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osTimerStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[269]"></a>osTimerStop</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, cmsis_os2.o(.text.osTimerStop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[250]"></a>pcTaskGetName</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text.pcTaskGetName), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
</UL>

<P><STRONG><a name="[262]"></a>pcTimerGetName</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, timers.o(.text.pcTimerGetName), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerGetName
</UL>

<P><STRONG><a name="[1ee]"></a>pvPortMalloc</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>

<P><STRONG><a name="[2ab]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[f6]"></a>pvTimerGetTimerID</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timers.o(.text.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pvTimerGetTimerID &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[27c]"></a>pxPortInitialiseStack</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[28f]"></a>ulTaskNotifyTake</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tasks.o(.text.ulTaskNotifyTake), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[102]"></a>unw_get_fpreg</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[f8]"></a>unw_get_proc_info</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_proc_info))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[100]"></a>unw_get_reg</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_reg))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[fc]"></a>unw_init_local</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_init_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[110]"></a>unw_resume</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_resume))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[101]"></a>unw_save_vfp_as_X</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_save_vfp_as_X))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[107]"></a>unw_set_fpreg</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[105]"></a>unw_set_reg</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_reg))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[124]"></a>unw_step</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_step))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
</UL>

<P><STRONG><a name="[26b]"></a>uxListRemove</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[229]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, queue.o(.text.uxQueueMessagesWaiting), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
</UL>

<P><STRONG><a name="[228]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, queue.o(.text.uxQueueMessagesWaitingFromISR), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
</UL>

<P><STRONG><a name="[22b]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(.text.uxQueueSpacesAvailable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetSpace
</UL>

<P><STRONG><a name="[244]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskGetNumberOfTasks), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>

<P><STRONG><a name="[18c]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tasks.o(.text.uxTaskGetStackHighWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uxTaskGetStackHighWaterMark &rArr; prvTaskCheckFreeStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
</UL>

<P><STRONG><a name="[245]"></a>uxTaskGetSystemState</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, tasks.o(.text.uxTaskGetSystemState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>

<P><STRONG><a name="[252]"></a>uxTaskPriorityGet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tasks.o(.text.uxTaskPriorityGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[33e]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, tasks.o(.text.uxTaskPriorityGetFromISR), UNUSED)

<P><STRONG><a name="[2a2]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[29c]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cmsis_os2.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2b0]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cmsis_os2.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[29f]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os2.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[65]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, event_groups.o(.text.vEventGroupClearBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vEventGroupClearBitsCallback &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text.xEventGroupClearBitsFromISR)
</UL>
<P><STRONG><a name="[211]"></a>vEventGroupDelete</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, event_groups.o(.text.vEventGroupDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[66]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[271]"></a>vListInitialise</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[27b]"></a>vListInitialiseItem</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[26d]"></a>vListInsert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[26c]"></a>vListInsertEnd</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[295]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text.vPortEndScheduler), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[203]"></a>vPortEnterCritical</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[204]"></a>vPortExitCritical</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1ec]"></a>vPortFree</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2a4]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[223]"></a>vQueueDelete</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
</UL>

<P><STRONG><a name="[287]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[f4]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Count()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UI_Draw
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[186]"></a>vTaskDelayUntil</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>

<P><STRONG><a name="[25e]"></a>vTaskDelete</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tasks.o(.text.vTaskDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[294]"></a>vTaskEndScheduler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(.text.vTaskEndScheduler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[282]"></a>vTaskGetInfo</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, tasks.o(.text.vTaskGetInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[2a7]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[28c]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[296]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, tasks.o(.text.vTaskNotifyGiveFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[297]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[292]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[298]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[299]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[25a]"></a>vTaskPrioritySet</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, tasks.o(.text.vTaskPrioritySet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[291]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vTaskRemoveFromUnorderedEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[258]"></a>vTaskResume</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tasks.o(.text.vTaskResume), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[29b]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSetTimeOutState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[209]"></a>vTaskStartScheduler</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[25c]"></a>vTaskSuspend</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(.text.vTaskSuspend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[21d]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[e8]"></a>vTaskSwitchContext</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[20f]"></a>xEventGroupClearBits</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[20e]"></a>xEventGroupClearBitsFromISR</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupClearBitsFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[192]"></a>xEventGroupCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Conrtol()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[214]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, event_groups.o(.text.xEventGroupCreateStatic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[20d]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupGetBitsFromISR), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[185]"></a>xEventGroupSetBits</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[216]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, event_groups.o(.text.xEventGroupSetBitsFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[2a1]"></a>xEventGroupSync</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, event_groups.o(.text.xEventGroupSync), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>

<P><STRONG><a name="[18a]"></a>xEventGroupWaitBits</STRONG> (Thumb, 348 bytes, Stack size 80 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_BB()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[33f]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_4.o(.text.xPortGetFreeHeapSize), UNUSED)

<P><STRONG><a name="[340]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_4.o(.text.xPortGetMinimumEverFreeHeapSize), UNUSED)

<P><STRONG><a name="[29e]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ef]"></a>xPortSysTickHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[240]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(.text.xQueueCreateCountingSemaphore), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[23f]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, queue.o(.text.xQueueCreateCountingSemaphoreStatic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[239]"></a>xQueueCreateMutex</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[238]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[22e]"></a>xQueueGenericCreate</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[22d]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[233]"></a>xQueueGenericReset</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[231]"></a>xQueueGenericSend</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
</UL>

<P><STRONG><a name="[230]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[237]"></a>xQueueGetMutexHolder</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queue.o(.text.xQueueGetMutexHolder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexGetOwner
</UL>

<P><STRONG><a name="[242]"></a>xQueueGiveFromISR</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, queue.o(.text.xQueueGiveFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[23a]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[2a9]"></a>xQueuePeek</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, queue.o(.text.xQueuePeek), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[2aa]"></a>xQueuePeekFromISR</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, queue.o(.text.xQueuePeekFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[226]"></a>xQueueReceive</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[225]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceiveFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[235]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[234]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[2a8]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[193]"></a>xTaskCreate</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Conrtol()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[256]"></a>xTaskCreateStatic</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[248]"></a>xTaskGenericNotify</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, tasks.o(.text.xTaskGenericNotify), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[24b]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 398 bytes, Stack size 96 bytes, tasks.o(.text.xTaskGenericNotifyFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[247]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[219]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[183]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[21b]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetTickCountFromISR), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[2a6]"></a>xTaskIncrementTick</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[2ae]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tasks.o(.text.xTaskNotifyStateClear), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[24d]"></a>xTaskNotifyWait</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, tasks.o(.text.xTaskNotifyWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[277]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2ac]"></a>xTaskPriorityInherit</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xTaskPriorityInherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[28b]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[21f]"></a>xTaskResumeAll</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2af]"></a>xTaskResumeFromISR</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, tasks.o(.text.xTaskResumeFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[267]"></a>xTimerCreate</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, timers.o(.text.xTimerCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[266]"></a>xTimerCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, timers.o(.text.xTimerCreateStatic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[29d]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[260]"></a>xTimerGenericCommand</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[341]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timers.o(.text.xTimerGetTimerDaemonTaskHandle), UNUSED)

<P><STRONG><a name="[264]"></a>xTimerIsTimerActive</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, timers.o(.text.xTimerIsTimerActive), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
</UL>

<P><STRONG><a name="[2b1]"></a>xTimerPendFunctionCall</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, timers.o(.text.xTimerPendFunctionCall), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a0]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, timers.o(.text.xTimerPendFunctionCallFromISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBitsFromISR
</UL>

<P><STRONG><a name="[2ba]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[2b2]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[2b4]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[2b5]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[2b6]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[2b7]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[133]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
</UL>

<P><STRONG><a name="[134]"></a>atan2f</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = atan2f &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::GET_ROLL(AHRS_QuaternionTypeDef)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
</UL>

<P><STRONG><a name="[10e]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sinf &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
</UL>

<P><STRONG><a name="[2b9]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::OnDraw()
</UL>

<P><STRONG><a name="[2bd]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::OnDraw()
</UL>

<P><STRONG><a name="[2c1]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecView::OnDraw()
</UL>

<P><STRONG><a name="[342]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2c0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2bf]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[2c2]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_GetAttitude()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::GET_ROLL(AHRS_QuaternionTypeDef)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(ACCEL, GYRO)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_TEMP(float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(float*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2c4]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[2c8]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[344]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[2ca]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[2cc]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[345]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[2cd]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
</UL>

<P><STRONG><a name="[2cf]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conrtol::Task_Moto()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
</UL>

<P><STRONG><a name="[2d0]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
</UL>

<P><STRONG><a name="[2d2]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[2d4]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL(float*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_TEMP(float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[2d3]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[346]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[2cb]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[2d5]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
</UL>

<P><STRONG><a name="[2d6]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::MPU_6050_FixZero()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_ACCEL(float*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_TEMP(float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[347]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[348]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[2ce]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[349]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[2d1]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[34a]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_1(float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::SetPort_0(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPORT::Init()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::GET_ROLL(AHRS_QuaternionTypeDef)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(ACCEL, GYRO)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSine(short*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(float*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt(float)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2d7]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2c7]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2c6]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2bb]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[2b8]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2d8]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2bc]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::GET_ROLL(AHRS_QuaternionTypeDef)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(ACCEL, GYRO)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID_UpData(float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Get_GYRO(float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC::IsOverlap(REC&, REC&)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAGM(float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS::IMUupdateAG(float*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt(float)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2da]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2c9]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[2b3]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>

<P><STRONG><a name="[2db]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fb]"></a>os_kernel_is_active</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, clib_arm.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[62]"></a>TimerCallback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os2.o(.text.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TimerCallback &rArr; pvTimerGetTimerID &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[ed]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ee]"></a>SetSysClockTo72</STRONG> (Thumb, 294 bytes, Stack size 12 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[2a3]"></a>prvTestWaitCondition</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, event_groups.o(.text.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[2a5]"></a>prvPortStartFirstTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[63]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[28d]"></a>prvHeapInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[28e]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[274]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[276]"></a>prvCopyDataToQueue</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2ad]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, queue.o(.text.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[278]"></a>prvInitialiseMutex</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[279]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[27f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[280]"></a>prvIsQueueFull</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[28a]"></a>prvUnlockQueue</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[26a]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[26e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[272]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[273]"></a>prvDeleteTCB</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[64]"></a>prvIdleTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[27a]"></a>prvInitialiseNewTask</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[26f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[281]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(.text.prvListTasksWithinSingleList), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[293]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[290]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, tasks.o(.text.prvTaskCheckFreeStackSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[29a]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text.prvTaskIsTaskSuspended), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[270]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[289]"></a>prvGetNextExpireTime</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[27d]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, timers.o(.text.prvInitialiseNewTimer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[27e]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[283]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[284]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[286]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[285]"></a>prvSampleTimeNow</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[288]"></a>prvSwitchTimerLists</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[67]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2c3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[2be]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2d9]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[2c5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[11e]"></a>_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[61]"></a>_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_throw)
</UL>
<P><STRONG><a name="[60]"></a>_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
</UL>
<P><STRONG><a name="[aa]"></a>__cxa_end_cleanup_impl</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_cleanup_impl), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = __cxa_end_cleanup_impl &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[119]"></a>_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</STRONG> (Thumb, 926 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context &rArr; _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[121]"></a>_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[11c]"></a>_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[11b]"></a>_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L18readEncodedPointerEPPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L18readEncodedPointerEPPKhh &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[11d]"></a>_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[fd]"></a>_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_resume
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[123]"></a>&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZN12_GLOBAL__N_114unwindOneFrameEjP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr1
</UL>

<P><STRONG><a name="[c8]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[cf]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_memalign_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>

<P><STRONG><a name="[114]"></a>&lang;unnamed namespace 1&rang;::fallback_free(void*)</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_113fallback_freeEPv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>

<P><STRONG><a name="[116]"></a>&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_115fallback_mallocEj))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
